using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using TestGeneratorDll;

namespace TestGeneratorUnitTests
{
    [TestClass]
    public class UnitTest1
    {
        private string code;
        private List<TestFile> testfiles_single;
        private List<TestFile> testfiles_multiple;
        private List<TestFile> testfiles_mistake;

        [TestInitialize]
        public void Setup()
        {
            using (StreamReader fStream = new StreamReader(@"C:\Users\home\Desktop\Test1.cs"))
            {
                code = fStream.ReadToEnd();
            }
            testfiles_single = new TestGenerator().Generate(code);
            using (StreamReader fStream = new StreamReader(@"C:\Users\home\Desktop\Test2.cs"))
            {
                code = fStream.ReadToEnd();
            }
            testfiles_multiple = new TestGenerator().Generate(code);
            using (StreamReader fStream = new StreamReader(@"C:\Users\home\Desktop\Test4.cs"))
            {
                code = fStream.ReadToEnd();
            }
            testfiles_mistake = new TestGenerator().Generate(code);

        }

        [TestMethod]
        public void TestClassCount()
        {
            Assert.AreEqual(testfiles_single.Count, 1);
            Assert.AreEqual(testfiles_multiple.Count, 2);
            Assert.IsNull(testfiles_mistake);
        }

        [TestMethod]
        public void TestFileNames()
        {
            string name1 = "Faker.ArrayGen.cs";
            string name2 = "AssemblyBrowser.TypeInfo.cs";
            string name3 = "AssemblyBrowser.TypeMethod.cs";
            Assert.AreEqual(testfiles_single[0].FileName,name1);
            Assert.AreEqual(testfiles_multiple[0].FileName,name2);
            Assert.AreEqual(testfiles_multiple[1].FileName, name3);
        }

        [TestMethod]
        public void TestUsingStatements()
        {
            string expected1 =
                "using System;\r\n" +
                "using System.Collections.Generic;\r\n" +
                "using System.Text;\r\n" +
                "using Microsoft.VisualStudio.TestTools.UnitTesting;\r\n";
            Assert.IsTrue(testfiles_single[0].Code.Contains(expected1));
            string expected2 =
                "using System;\r\n" +
                "using System.Collections.Generic;\r\n" +
                "using System.Linq;\r\n" +
                "using System.Reflection;\r\n" +
                "using System.Runtime.CompilerServices;\r\n" +
                "using Microsoft.VisualStudio.TestTools.UnitTesting;\r\n";
            Assert.IsTrue(testfiles_multiple[0].Code.Contains(expected2));
        }

        [TestMethod]
        public void TestNamespacesAndClasses()
        {
            string namespace1_exp = "namespace FakerTests\r\n{";
            string namespace2_exp = "namespace AssemblyBrowserTests\r\n{";
            Assert.IsTrue(testfiles_single[0].Code.Contains(namespace1_exp));
            Assert.IsTrue(testfiles_multiple[0].Code.Contains(namespace2_exp));

            string class1_exp = "public class ArrayGenTest";
            string class2_exp = "public class TypeInfoTest";
            string class3_exp = "public class TypeMethodTest";
            Assert.IsTrue(testfiles_single[0].Code.Contains(class1_exp));
            Assert.IsTrue(testfiles_multiple[0].Code.Contains(class2_exp));
            Assert.IsTrue(testfiles_multiple[1].Code.Contains(class3_exp));
        }

        [TestMethod]
        public void TestAttributes()
        {
            string class_attr = "\\[TestClass\\]";
            Assert.AreEqual(Regex.Matches(testfiles_single[0].Code, class_attr).Count,1);
            Assert.AreEqual(Regex.Matches(testfiles_multiple[0].Code, class_attr).Count, 1);
            Assert.AreEqual(Regex.Matches(testfiles_multiple[1].Code, class_attr).Count, 1);

            string method_attr = "\\[TestMethod\\]";
            Assert.AreEqual(Regex.Matches(testfiles_single[0].Code, method_attr).Count, 1);
            Assert.AreEqual(Regex.Matches(testfiles_multiple[0].Code, method_attr).Count, 4);
            Assert.AreEqual(Regex.Matches(testfiles_multiple[1].Code, method_attr).Count, 1);
        }

        [TestMethod]
        public void TestInitializer()
        {
            string str = "Assert\\.Fail\\(\"autogenerated\"\\);";
            Assert.AreEqual(Regex.Matches(testfiles_single[0].Code, str).Count, 1);
            Assert.AreEqual(Regex.Matches(testfiles_multiple[0].Code, str).Count, 4);
            Assert.AreEqual(Regex.Matches(testfiles_multiple[1].Code, str).Count, 1);

            string init = "public void Initialize()";
            Assert.IsTrue(testfiles_single[0].Code.Contains(init));
            Assert.IsTrue(testfiles_multiple[0].Code.Contains(init));
            Assert.IsTrue(testfiles_multiple[1].Code.Contains(init));
        }

        [TestMethod]
        public void TestMethods()
        {
            string method1 = "public void TestGenerate()";
            string method2_1 = "public void TestAddMember()";
            string method2_2 = "public void TestGetAccessor()";
            string method3 = "public void TestGetView()";
            Assert.IsTrue(testfiles_single[0].Code.Contains(method1));
            Assert.IsTrue(testfiles_multiple[0].Code.Contains(method2_1));
            Assert.IsTrue(testfiles_multiple[0].Code.Contains(method2_2));
            Assert.IsTrue(testfiles_multiple[1].Code.Contains(method3));
        }




    }
}
